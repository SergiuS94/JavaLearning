Java doesn't allow multiple inheritance, but it allow to implement any number of interfaces.
In interface is an abstract data type that defines a list of abstract public methods that any class implementing the interface must provide.
An interface can also include a list of constant variables and default methods

Defining an interface

public               abstract    interface   className{
access modifier  |   assumed   | required  |  required

Rules for creating an interface:
1. Interfaces cannot be instantiated
2. An interface is not required to have any methods
3. An interface may not be marked as final
4. All top-level interfaces are assumed to have public or default access, and they must include the abstract modifier in their definition.
Therefore, marking a method as private, protected or final will trigger compiler errors since this is incompatible with these assumptions.
5. All non default methods in an interface are assumed to have the modifiers abstract and public in their definition.
Therefore, marking a method as private, protected or final will trigger compiler errors as these are incompatible with the abstract and public keywords

* The 4th rule doesn't appyly to inner interfaces, although inner classes and interfaces are not in scope for the OCA exam.

A class can implement an interface, but cannot extend an interface
An interface can extend another interface, but cannot implement another interface.
An interface can't extend another class

You can inherit multiple Interfaces that have the same methods(including signature). That will be considered a duplicate, and implementing it once, will be enough.
In the case of multiple Interfaces with the same methods name, but different signature, you have to implement all of them.
In the case of multiple Interfaces with the same method name and signature, but different return type, the code won't compile.
    !You can't define a method twice, with the same name and parameters but different return type
    !The compiler would throw an exception from the moment you try to implement two incompatible interfaces (like containing methods with the same name and params, but different return type)
        ->even if an interface tries to extend those interfaces or a simple class tries to implement them or an abstract class tries to implement them

INTERFACE VARIABLES:
    ->assumed to be public
    ->assumed to be static final
    ->MUST BE INITIALIZED
There are two rules:
    1.Interface variables are assumed to be public, static and final. Therefore, marking a variable as private or protected will trigger a compiler error,
    as will marking any variable as abstract
    2.The value of an interface variable must be set when it is declared since it is marked as final
    ->So the interface variables are essentially constant variables defined on the interface level

Default Interface Methods
    ->a default method is a method defined within an interface with the default keyword in which a method body is provided
    ->the regular methods in an interface are assumed to be abstract and may not have a body
    ->A default method within an interface defines an abstract method with a default implementation
    ->Classes have the option to override the default method if needed tu, but they are not required.
        If it doesn't override the method, the default will be used.
    ->In this manner, the method definition is concrete, not abstract
Rules:
    1.A default method may only be declared within an interface and not within a class or abstract class.
    2.A default method must be marked with th default keyword. If a method is marked as default, it must provide a method body
    3.A default method is not assumed to be static, final or abstract, as it may be used or overridden by a class that implements
      the interface
    4.Like all methods in an interface, a default method is assumed to be public and will not compile if marked as private or protected
