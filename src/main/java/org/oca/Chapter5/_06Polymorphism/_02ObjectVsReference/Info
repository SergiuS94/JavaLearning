Object vs Reference
    ->In java, all objects are accessed by reference, so you never have direct access to the object itself.
    ->Conceptually, you should consider the object as the entity that exists in memory, allocated by the Java runtime environment.
    ->Regardless of the type of the reference you have for the object in memory, the object itself doesn't change
    ex:
        Since all objects inherit java.lang.Object we can reassign our objects like in the example:
        Lemur lemur = new Lemur();
        Object lemurAsObject = lemur;
        ->Lemur object has beena assigned a reference with a different type, the object itself has not changed and still exists as
            a Lemur object in the memory.
            !!What has changed is our ability to access methods within the Lemur class with the lemurAsObject reference.
                ->Without explicit cast back to lemur we no longer have access to the Lemur properties
        We can summarize in two rules:
        1.The type of the object determines which properties exist within the object in memory
        2.The type of the reference to the object determines which methods and variables are accessible to the Java program
